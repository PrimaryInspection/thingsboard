/**
 * Copyright Â© 2016-2020 The Thingsboard Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package gw;

//option java_multiple_files = true;
option java_package = "org.thingsboard.server.gen.gw";
option java_outer_classname = "GatewayProtos";

enum KeyValueType {
  //    option allow_alias = true;
  UNKNOWN = 0;
  BOOLEAN_V = 1;
  LONG_V = 2;
  DOUBLE_V = 3;
  STRING_V = 4;
  JSON_V = 5;
  BYTES_V = 6;
}

message KeyValueProto {
  string key = 1;
  KeyValueType type = 2;
  bool bool_v = 3;
  int64 long_v = 4;
  double double_v = 5;
  string string_v = 6;
  string json_v = 7;
  bytes bytes_v =8; // added simetrycally with byte type
}

message KvListProto {
  repeated KeyValueProto kv = 2;
}

message TsKvListProto {
  int64 ts = 1;
  repeated KeyValueProto kv = 2;
}

message TsKvListProtoArray {
  repeated TsKvListProto tsKv = 1;
}

message ClaimDevice {
  string secretKey = 1;
  int64 durationMs = 2;
}

message TelemetryMsg {
  string deviceName = 1;
  string deviceType = 2;
  repeated TsKvListProto values = 3;
}
/* New added especially for TBGateway */
enum ByteOrder {
  BIG = 0;
  LITTLE = 1;
}
enum ModbusType {
  integer_v = 0;
  long_v = 1;
  double_v = 2;
  string_v = 3;
  bit_v = 4;
}

message Rpc {
  ByteOrder byteOrder = 1;
  string tag = 2;
  ModbusType type = 3;
  double functionCode = 4;
  double registerCount = 5;
  double address = 6;
  int32 bit = 7;
}

message Timeseries {
  ByteOrder byteOrder = 1;
  string tag = 2;
  ModbusType type = 3;
  double functionCode = 4;
  double registerCount = 5;
  double address = 6;
}

message Attributes {
  ByteOrder byteOrder = 1;
  string tag = 2;
  ModbusType type = 3;
  double functionCode = 4;
  double registerCount = 5;
  double address = 6;
}

message Device {
  double unitId = 1;
  string deviceName = 2;
  double attributesPollPeriod = 3;
  double timeseriesPollPeriod = 4;
  bool sendDataOnlyOnChange = 5;

  repeated Attributes attributes = 13;
  repeated Timeseries timeseries = 14;
  repeated Rpc rpc = 15;
}

enum ServerType{
  TCP = 0;
  UDP = 1;
  SERIAL = 2;
}
enum Method{
  rtu = 0;
  socket = 1;
  ascii = 2;
}
enum Stopbits {
  S0 = 0;
  S1 = 1;
  S2 = 2;
}
enum Bytesize {
  S7 = 0;
  S8 = 1;
}
enum Parity {
  N = 0;
  E = 1;
  O = 2;
}

message Server {
  string name = 1;
  ServerType type = 2;
  string host = 3;
  string port = 4;   //problem wtih this field double described as string and as double
  double timeout = 5;
  Method method = 6;
  double baudrate = 7;
  Stopbits stopbits = 8;
  Bytesize bytesize = 9;
  Parity parity = 10;
  bool strict = 11;

  repeated Device devices = 15;
}

message Config {
  string name = 1;
  Server server = 2;
}

message Modbus {
  string name = 1;
  Config config = 2;
}

message Security {
  string accessToken = 1;
}

enum StorageType {
  file = 0;
  memory = 1;
}
message Storage {
  StorageType type = 1;
  string data_folder_path = 2;   //name shall be same as in Json
  double max_file_count = 3;
  double max_read_records_count = 4;
  double max_records_per_file = 5;
  double read_records_count = 6;//memory storage only
  double max_records_count = 7;//memory storage only
}

enum ConnectorsType {
  modbus = 0;
}
message Connectors {
  string configuration = 1;
  string name = 2;
  ConnectorsType type = 3;
}

message ThingsBoardI {
  string host = 1;
  bool remoteConfiguration = 2;
  double port = 3;
  Security security = 4;
}

message ThingsBoardConfiguration {
  ThingsBoardI thingsboard = 1;
  Storage storage = 2;
  repeated Connectors connectors = 3;
  bytes logs = 4;
}

message ThingsBoard {
  ThingsBoardConfiguration thingsboard = 1;
  repeated Modbus modbus = 5;
  uint64 topLevelTestValue = 8;
}